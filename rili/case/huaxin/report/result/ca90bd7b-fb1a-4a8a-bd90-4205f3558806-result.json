{"name": "test_map_change", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\nStacktrace:\nUnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\n    at JWProxy.command$ (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\jsonwp-proxy\\proxy.js:238:13)\n    at tryCatch (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:67:40)\n    at GeneratorFunctionPrototype.invoke [as _invoke] (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:315:22)\n    at GeneratorFunctionPrototype.prototype.(anonymous function) [as throw] (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:100:21)\n    at GeneratorFunctionPrototype.invoke (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:136:37)\n    at run (C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\es6.promise.js:75:1)\n    at C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\es6.promise.js:92:1\n    at flush (C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\_microtask.js:18:1)\n    at process._tickCallback (internal/process/next_tick.js:61:11)", "trace": "self = <case.huaxin.test_aasmoke.TestSmoke object at 0x05054070>\n\n    @allure.description(\"\"\"  测试步骤五：随机调整地址栏的省市区，截图调整后的地图，并和之前的进行比较，若两者相似度小于0.86，则表示测试通过 \"\"\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.story(\"地图更改\")\n    # @pytest.mark.repeat(3)\n    def test_map_change(self):\n>       approximation = self.setapp.map_selection(self.driver)\n\ntest_aasmoke.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nyork\\set_app.py:154: in map_selection\n    image1 = self.now_screenshot(self.driver, 'map.png')\nyork\\set_app.py:203: in now_screenshot\n    self.driver.get_screenshot_as_file(self.final_img_path)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:962: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode('ascii'))\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:974: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\nD:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:30: in check_response\n    raise wde\nD:\\python\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:26: in check_response\n    super().check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0505DC58>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...\\\\\\\\core-js\\\\\\\\modules\\\\\\\\_microtask.js:18:1)\\\\n    at process._tickCallback (internal/process/next_tick.js:61:11)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: socket hang up\nE           at JWProxy.command$ (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\appium-base-driver\\lib\\jsonwp-proxy\\proxy.js:238:13)\nE           at tryCatch (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:67:40)\nE           at GeneratorFunctionPrototype.invoke [as _invoke] (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:315:22)\nE           at GeneratorFunctionPrototype.prototype.(anonymous function) [as throw] (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:100:21)\nE           at GeneratorFunctionPrototype.invoke (C:\\Program Files (x86)\\Appium\\resources\\app\\node_modules\\appium\\node_modules\\babel-runtime\\regenerator\\runtime.js:136:37)\nE           at run (C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\es6.promise.js:75:1)\nE           at C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\es6.promise.js:92:1\nE           at flush (C:\\Program Files (x86)\\Appium\\resources\\app\\webpack:\\~\\babel-polyfill\\~\\core-js\\modules\\_microtask.js:18:1)\nE           at process._tickCallback (internal/process/next_tick.js:61:11)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: WebDriverException"}, "description": "  测试步骤五：随机调整地址栏的省市区，截图调整后的地图，并和之前的进行比较，若两者相似度小于0.86，则表示测试通过 ", "start": 1665455026855, "stop": 1665455026866, "uuid": "3f80dbb9-3d22-45b5-ab83-41e17d3d6df9", "historyId": "5575ec62201380134945451817776cc6", "testCaseId": "66d71119cbb5cfa407238f00c7b67f84", "fullName": "case.huaxin.test_aasmoke.TestSmoke#test_map_change", "labels": [{"name": "epic", "value": "约克智慧家"}, {"name": "story", "value": "地图更改"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "冒烟测试"}, {"name": "parentSuite", "value": "case.huaxin"}, {"name": "suite", "value": "test_aasmoke"}, {"name": "subSuite", "value": "TestSmoke"}, {"name": "host", "value": "LAPTOP-TABJSFGD"}, {"name": "thread", "value": "28604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.huaxin.test_aasmoke"}]}